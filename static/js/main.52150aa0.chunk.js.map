{"version":3,"sources":["pages/ClickyHead/index.js","pages/ClickyBody/index.js","serviceWorker.js","index.js","App.js","assets/gifs/gifList.js"],"names":["ClickyHead","props","id","className","onClick","handleGoClick","running","score","htmlFor","type","name","step","min","max","value","gridSide","onChange","handleGridChange","ClickyBody","width","victory","pageOrder","map","elt","index","console","log","key","src","url","alt","imgId","handleImgClick","height","Boolean","window","location","hostname","match","ReactDOM","render","useState","setScore","setRunning","setVictory","setGridSide","setPageOrder","clickedImages","setClickedImages","useEffect","sideSize","elements","workArray","sort","a","b","Math","random","slice","i","choose","event","target","imageNumber","bufferArray","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAGe,SAASA,EAAWC,GAC/B,OACI,yBAAKC,GAAG,cAAcC,UAAU,OAC5B,yBAAKA,UAAU,YACX,yBAAKD,GAAG,WACJ,0CACA,6CAGR,yBAAKC,UAAU,iBACX,4BAAQA,UAAU,kBACdC,QAASH,EAAMI,eAAe,4BAAKJ,EAAMK,QAAS,OAAO,SAEjE,yBAAKH,UAAU,iBACX,yBAAKD,GAAG,aACJ,sCAAYD,EAAMM,SAG1B,yBAAKJ,UAAU,YACVF,EAAMK,QAAY,4BACf,yBAAKH,UAAU,iBACX,2BAAOK,QAAQ,YAAYN,GAAG,YAAW,2DACzC,2BAAOO,KAAK,SAASP,GAAG,YAAYQ,KAAK,YAAYP,UAAU,aAC3DQ,KAAK,IAAIC,IAAI,IAAIC,IAAI,IAAIC,MAAOb,EAAMc,SAAUC,SAAUf,EAAMgB,sB,MCvB7E,SAASC,EAAWjB,GAgBjC,OACE,yBAAKE,UAAU,iBAAiBgB,MAAM,IAAIjB,GAAID,EAAMmB,QAAU,UAAY,UACxE,yBAAKjB,UAAU,wBACXF,EAAMK,QACNL,EAAMoB,UAAUC,KAlBxB,SAAkBC,EAAIC,GAEpB,OADAC,QAAQC,IAAR,gBAAqBF,EAArB,4BAA8CvB,EAAMc,WAGhD,yBAAKY,IAAKH,GACR,yBAAKrB,UAAU,QACb,2BAAOM,KAAK,QAAQmB,IAAKL,EAAIM,IAAKC,IAAI,SAASH,IAAKJ,EAAIQ,MACtD3B,QAAS,kBAAIH,EAAM+B,eAAeT,EAAIQ,QAAQZ,MAAM,MAAMc,OAAO,aAUpD,6BAAK,wBAAI/B,GAAG,cAAcD,EAAMmB,QAAS,UAAW,gBCV3Dc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCDD,WAAsB,IAAD,EACUC,mBAAW,GADrB,mBAC3BlC,EAD2B,KACFmC,EADE,OAEUD,oBAAS,GAFnB,mBAE3BnC,EAF2B,KAEJqC,EAFI,OAGUF,oBAAS,GAHnB,mBAG3BrB,EAH2B,KAGJwB,EAHI,OAIUH,mBAAW,GAJrB,mBAI3B1B,EAJ2B,KAIL8B,EAJK,OAKUJ,mBAAU,IALpB,mBAK3BpB,EAL2B,KAKNyB,EALM,OAMUL,mBAAU,IANpB,mBAM3BM,EAN2B,KAMVC,EANU,KAiFlC,OAvEAC,qBAAU,WAOJ3C,GAEFsC,GAAW,GACXF,EAAS,KAOTI,EAiBJ,SAAgBI,GAEd,IAAIC,EAAWD,EAAWA,EAEtBE,ECnDF,CACE,CAACrB,MAAQ,EAAGF,IAAK,8DACjB,CAACE,MAAQ,EAAGF,IAAK,8DACjB,CAACE,MAAQ,EAAGF,IAAK,8DACjB,CAACE,MAAQ,EAAGF,IAAK,yDACjB,CAACE,MAAQ,EAAGF,IAAK,8DACjB,CAACE,MAAQ,EAAGF,IAAK,6DACjB,CAACE,MAAQ,EAAGF,IAAK,8DACjB,CAACE,MAAQ,EAAGF,IAAK,6DACjB,CAACE,MAAQ,EAAGF,IAAK,6DACjB,CAACE,MAAQ,EAAGF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,6DACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,6DACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,+DACjB,CAACE,MAAO,GAAIF,IAAK,+DACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,yDACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,6DACjB,CAACE,MAAO,GAAIF,IAAK,6DACjB,CAACE,MAAO,GAAIF,IAAK,6DACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,6DACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,6DACjB,CAACE,MAAO,GAAIF,IAAK,6DACjB,CAACE,MAAO,GAAIF,IAAK,6DACjB,CAACE,MAAO,GAAIF,IAAK,6DACjB,CAACE,MAAO,GAAIF,IAAK,8DACjB,CAACE,MAAO,GAAIF,IAAK,6DACjB,CAACE,MAAO,GAAIF,IAAK,8DDOrB,OANAuB,EAAUC,MAAK,SAACC,EAAEC,GAAH,OAAUC,KAAKC,SAAS,MAIvCL,GAFAA,EAAYA,EAAUM,MAAM,EAAEP,IAER7B,KAAK,SAACC,EAAIoC,GAAL,MAAY,CAAC5B,MAAO4B,EAAG9B,IAAKN,EAAIM,QA3B5C+B,CAAO7C,IAEpBiC,EAlBY,CAEZ,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAChD,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAevBU,MAAM,EAAE3C,EAASA,OAEzC,CAACA,EAAST,IAmDX,yBAAKH,UAAU,aACb,kBAACH,EAAD,CACEM,QAASA,EACTC,MAAOA,EACPQ,SAAUA,EACVV,cA/CN,WACEsC,GAAWrC,IA+CPW,iBArDN,SAA0B4C,GACxBhB,EAAYgB,EAAMC,OAAOhD,UAsDvB,kBAACI,EAAD,CACEE,QAASA,EACTd,QAASA,EACTe,UAAWA,EACXN,SAAUA,EACViB,eApCN,SAAwBD,GAEtB,IAAMgC,EAAchC,EAEpB,GAAIgB,EAAcgB,GAEhBpB,GAAW,QAEX,GAAIpC,IAAW,SAAAQ,EAAU,GAAI,EAC3B6B,GAAW,GACXD,GAAW,GACXD,EAAS,KAAD,IAAC3B,EAAU,QACd,CACLgC,EAAcgB,GAAe,EAC7BrB,EAASnC,EAAQ,GACjB,IAAIyD,EAAc3C,EAClB2C,EAAYX,MAAK,SAACC,EAAEC,GAAH,OAASC,KAAKC,SAAS,MACxCX,EAAakB,UD3EL,MAAeC,SAASC,eAAe,SD6HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.52150aa0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nexport default function ClickyHead(props) {\r\n    return (    \r\n        <div id=\"game-status\" className=\"row\">\r\n            <div className=\"col-sm-3\">\r\n                <div id=\"nameBox\">\r\n                    <h5>rguthrie's</h5>\r\n                    <h4>Clicky Game</h4>\r\n                </div>            \r\n            </div>\r\n            <div className=\"col-sm-2 mt-5\">\r\n                <button className=\"btn btn-primary\" \r\n                    onClick={props.handleGoClick}><h4>{props.running? 'Stop':'Go!'}</h4></button>\r\n            </div>\r\n            <div className=\"col-sm-2 mt-5\">\r\n                <div id=\"score-box\">\r\n                    <h1>Score: {props.score}</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-sm-5\">\r\n                {props.running ?  (<p></p>) : (\r\n                    <div className=\"col-auto mt-5\">\r\n                        <label htmlFor=\"grid-size\" id=\"lenQuery\"><h4>Grid Size (X by X)? (2-7):</h4></label>\r\n                        <input type=\"number\" id=\"grid-size\" name=\"grid-size\" className=\"numericBox\" \r\n                            step=\"1\" min=\"2\" max=\"7\" value={props.gridSide} onChange={props.handleGridChange}/>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nexport default function ClickyBody(props) {\r\n\r\n  function emitCard(elt,index) {\r\n    console.log(`index ${index}, props.gridSide ${props.gridSide}`)\r\n    return(\r\n      (\r\n        <div key={index}>\r\n          <div className=\"card\">\r\n            <input type=\"image\" src={elt.url} alt=\"submit\" key={elt.imgId} \r\n              onClick={()=>props.handleImgClick(elt.imgId)} width=\"128\" height=\"128\"></input>\r\n          </div>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  return (    \r\n    <div className=\"row game-board\" width=\"0\" id={props.victory ? \"victory\" : \"normal\"}>\r\n      <div className=\"col-sm-12 grid-field\">\r\n        {!props.running ? (<div><h3 id=\"body-label\">{props.victory? \"WINNER!\": \"Click Go!\"}</h3></div>) : \r\n          props.pageOrder.map(emitCard)}\r\n      </div>\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ClickyApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ClickyApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect, useState } from \"react\";\nimport ClickyHead from \"./pages/ClickyHead\";\nimport ClickyBody from \"./pages/ClickyBody\";\nimport gifList from \"./assets/gifs/gifList\";\n\nexport default function ClickyApp() {\n  const [score         ,          setScore] = useState(  0  );\n  const [running       ,        setRunning] = useState(false);\n  const [victory       ,        setVictory] = useState(false);\n  const [gridSide      ,       setGridSide] = useState(  2  );\n  const [pageOrder     ,      setPageOrder] = useState( []  );\n  const [clickedImages ,  setClickedImages] = useState( []  );\n\n  // Image grid set up at initialization, and also when the user\n  // selects a different gridSide\n  useEffect(() => {\n    const zeros = [\n      // 49\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n    ];\n\n    if (running) {\n      // just transitioned to running\n      setVictory(false);\n      setScore(0);\n    } else {  \n      // just transitioned to not running.\n      // pageOrder[] will be gridSide*gridSide randomly selected\n      // gif Objects with a sequential assignment of imgIds. (the\n      // sequential numbering ensures the range of imgIds doesn't \n      // exceed the count of elements.)\n      setPageOrder(choose(gridSide));\n      // clear the tracking array.  \n      setClickedImages(zeros.slice(0,gridSide*gridSide));\n    }  \n  }, [gridSide,running]);\n\n  // Assign the new gridSide; useEffect() will be triggered from the assignment.\n  // Note the selector on the page is only drawn when running is false.\n  function handleGridChange(event) {\n    setGridSide(event.target.value);\n  }\n\n  // Toggle the Go/Stop button. Change of 'running' will trigger useEffect() \n  function handleGoClick() {\n    setRunning(running? false : true);\n  }\n\n  function choose(sideSize) {\n    // grid is a square; total elements is square of side length\n    let elements = sideSize * sideSize;\n    // get the pool of gifs\n    let workArray = gifList();\n    // shuffle the copy\n    workArray.sort((a,b) => (Math.random()-0.5));\n    // keep only 'elements' members \n    workArray = workArray.slice(0,elements);\n    // now sequentially number the ids from 0 through (elements-1)\n    workArray = workArray.map( (elt,i) => ({imgId: i, url: elt.url}) );\n    // and return the result\n    return(workArray);\n  }\n\n  function handleImgClick(imgId) {\n    // imgId is the image index (as opposed to index of the displayed button)\n    const imageNumber = imgId;\n\n    if (clickedImages[imageNumber]) {\n      // oops, already clicked on this one.  Game Over.\n      setRunning(false);\n    } else {\n      if (score === (gridSide**2 - 1)) {\n        setVictory(true);\n        setRunning(false);\n        setScore(gridSide**2);\n      } else {\n        clickedImages[imageNumber] = 1;\n        setScore(score + 1);\n        let bufferArray = pageOrder;\n        bufferArray.sort((a,b) => Math.random()-0.5);\n        setPageOrder(bufferArray);\n      }\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <ClickyHead\n        running={running}\n        score={score}\n        gridSide={gridSide}\n        handleGoClick={handleGoClick}\n        handleGridChange={handleGridChange}\n      />\n      <ClickyBody\n        victory={victory}\n        running={running}\n        pageOrder={pageOrder}\n        gridSide={gridSide}\n        handleImgClick={handleImgClick}\n      />\n    </div>\n  )  \n}\n","export default function gifList() {\r\n    const imgObjs = \r\n      [\r\n        {imgId:  0, url: 'https://media.giphy.com/media/kga6OcqW0CNdfbEHwy/giphy.gif'},\r\n        {imgId:  1, url: 'https://media.giphy.com/media/QYpAz3np7ZMQlFMjlr/giphy.gif'},\r\n        {imgId:  2, url: 'https://media.giphy.com/media/C8QW6IwBG9JMw0mFMX/giphy.gif'},\r\n        {imgId:  3, url: 'https://media.giphy.com/media/AbL4XUXPX5MCA/giphy.gif'},\r\n        {imgId:  4, url: 'https://media.giphy.com/media/3oEjHYdoXUnkbUN8QM/giphy.gif'},\r\n        {imgId:  5, url: 'https://media.giphy.com/media/l0HlP0xdc6XSsmVoY/giphy.gif'},\r\n        {imgId:  6, url: 'https://media.giphy.com/media/3ornkdVFIaIkMrnkIg/giphy.gif'},\r\n        {imgId:  7, url: 'https://media.giphy.com/media/l46CA5eAtDMx4wiS4/giphy.gif'},\r\n        {imgId:  8, url: 'https://media.giphy.com/media/l2QZYm04iCcRWQT3a/giphy.gif'},\r\n        {imgId:  9, url: 'https://media.giphy.com/media/1ppubJh9F6dNI5aN8I/giphy.gif'},\r\n        {imgId: 10, url: 'https://media.giphy.com/media/JRUufaC837hSM/giphy.gif'},\r\n        {imgId: 11, url: 'https://media.giphy.com/media/NXLQDhOln6BjO/giphy.gif'},\r\n        {imgId: 12, url: 'https://media.giphy.com/media/l2QDUBwQTbStYGeoE/giphy.gif'},\r\n        {imgId: 13, url: 'https://media.giphy.com/media/gFB8ATae8KABG/giphy.gif'},\r\n        {imgId: 14, url: 'https://media.giphy.com/media/WZrOaNjFPKT5e/giphy.gif'},\r\n        {imgId: 15, url: 'https://media.giphy.com/media/SCST7tMXzStsA/giphy.gif'},\r\n        {imgId: 16, url: 'https://media.giphy.com/media/HNh4gzTjX7ji0/giphy.gif'},\r\n        {imgId: 17, url: 'https://media.giphy.com/media/3o7TKwDwEn02BIx9SM/giphy.gif'},\r\n        {imgId: 18, url: 'https://media.giphy.com/media/w1L6heWepUxVu/giphy.gif'},\r\n        {imgId: 19, url: 'https://media.giphy.com/media/l46CykJO7szNczcv6/giphy.gif'},\r\n        {imgId: 20, url: 'https://media.giphy.com/media/15btFYb0r9w0432u1I/giphy.gif'},\r\n        {imgId: 21, url: 'https://media.giphy.com/media/65BYoRKaL6oZDHRxxv/giphy.gif'},\r\n        {imgId: 22, url: 'https://media.giphy.com/media/Schz2qbHpfEAM/giphy.gif'},\r\n        {imgId: 23, url: 'https://media.giphy.com/media/ToMjGpRJkXEhjXj1Ttm/giphy.gif'},\r\n        {imgId: 24, url: 'https://media.giphy.com/media/ToMjGpqo37GHUEsTHEs/giphy.gif'},\r\n        {imgId: 25, url: 'https://media.giphy.com/media/63vcx7CRkf7QA/giphy.gif'},\r\n        {imgId: 26, url: 'https://media.giphy.com/media/WO2UgpZpVA47K/giphy.gif'},\r\n        {imgId: 27, url: 'https://media.giphy.com/media/NVlmPgRXhCmJ2/giphy.gif'},\r\n        {imgId: 28, url: 'https://media.giphy.com/media/H45KzcnMyIhtS/giphy.gif'},\r\n        {imgId: 29, url: 'https://media.giphy.com/media/5UJpu1HeOOBcE0JILD/giphy.gif'},\r\n        {imgId: 30, url: 'https://media.giphy.com/media/3o7qDFGP1vAQZUPoys/giphy.gif'},\r\n        {imgId: 31, url: 'https://media.giphy.com/media/kA1nC94OFuN9K/giphy.gif'},\r\n        {imgId: 32, url: 'https://media.giphy.com/media/xUOrwmaxrw9BMqzIBi/giphy.gif'},\r\n        {imgId: 33, url: 'https://media.giphy.com/media/SbtS2SVvmaKV807aK1/giphy.gif'},\r\n        {imgId: 34, url: 'https://media.giphy.com/media/Fnicg9msA6z3G/giphy.gif'},\r\n        {imgId: 35, url: 'https://media.giphy.com/media/g0KmfNe0EcRkxSJlzl/giphy.gif'},\r\n        {imgId: 36, url: 'https://media.giphy.com/media/2sdMbiLO5Z6RboF4Ih/giphy.gif'},\r\n        {imgId: 37, url: 'https://media.giphy.com/media/3o6ZsX9ogGeqIlfH20/giphy.gif'},\r\n        {imgId: 38, url: 'https://media.giphy.com/media/3ov9jRdUC1G5oKYNRC/giphy.gif'},\r\n        {imgId: 39, url: 'https://media.giphy.com/media/l378hKTzkbO4YuHBe/giphy.gif'},\r\n        {imgId: 40, url: 'https://media.giphy.com/media/l378ch0v3DzMUGm52/giphy.gif'},\r\n        {imgId: 41, url: 'https://media.giphy.com/media/l378h34GXL6h2G3du/giphy.gif'},\r\n        {imgId: 42, url: 'https://media.giphy.com/media/3ov9jMNPIZOC3QUEQE/giphy.gif'},\r\n        {imgId: 43, url: 'https://media.giphy.com/media/l41lNx6qN1EB1jh9S/giphy.gif'},\r\n        {imgId: 44, url: 'https://media.giphy.com/media/3ov9jUhsxCjtml94AM/giphy.gif'},\r\n        {imgId: 45, url: 'https://media.giphy.com/media/26vIfLSKzDoWwVqh2/giphy.gif'},\r\n        {imgId: 46, url: 'https://media.giphy.com/media/l378kzDK8wL2FPk9a/giphy.gif'},\r\n        {imgId: 47, url: 'https://media.giphy.com/media/26vIfQgWfC7hxebLO/giphy.gif'},\r\n        {imgId: 48, url: 'https://media.giphy.com/media/l378eg9i9q60bCNC8/giphy.gif'},\r\n        {imgId: 49, url: 'https://media.giphy.com/media/3ov9jKCkB6Kb2LMxva/giphy.gif'},\r\n        {imgId: 50, url: 'https://media.giphy.com/media/l0MYuBOUE97B1UNSU/giphy.gif'},\r\n        {imgId: 51, url: 'https://media.giphy.com/media/l378vNYx3Y4YmAKiI/giphy.gif'}\r\n    ];\r\n  return(imgObjs);  \r\n};\r\n\r\n\r\n\r\n"],"sourceRoot":""}